# Map the value of referer take from request ($http_referer)
# Map its value to new variable called $my_referer
# Like this
# if $http_referer is default (no referer) then $my_referer will have value "no_referer"
# if $http_referer contains string `cokhianphat.vn` (this is my domain, change to fit yours) then $my_referer will have value "has_referer"
map $http_referer $my_referer {
        default "no_referer";
        "~*jamesisme.com~*" "has_referer"; # change this server_name to your domain name
}

# 2 maps below look like the same, but one with value of $token will be sent back to client
map $http_cookie $my_auth_token {
        default "";
        "~*auth_token=(?<token>[^;]+)" "$token";
}

# this is for process inside Nginx its self
map $http_cookie $my_auth_status {
        default "";
        "~*auth_token=(?<token>[^;]+)" "is_auth";
}

#In here we decide which file to serve (to use) by the values of $my_referer and $my_auth_status
map $my_referer$my_auth_status $file_to_use { # use $my_referer$my_auth_status means: join values of 2 variables
        "no_referer" "login.html"; # if "no_referer" --> $my_auth_status is empty -> need login -> serve login.html
        "no_refereris_auth" "default.html"; # if "no_refererisauth" -> $my_auth_status = 'is_auth', but no referer, this case serve default.html (user is Viewing Page Source)
        "has_referer" "login.html"; # if 'has_referer' -> $my_auth_status is empty -> need login -> serve login.html
        "has_refereris_auth" "index.html"; # if 'has_refereris_auth' -> qualify to view homepage
}

server {
	listen 80 ;
        listen [::]:80 ;

	root /var/www/html/twitter-hacking; # change to folder which contains your code

	index $file_to_use; # take note of $file_to_use here (its value is dynamic based on maps functions above)

	server_name twitter-hacking.jamesisme.com; # change this server_name to your domain name
	
  # when use access route '/' we'll try to serve with $uri (URL user want) first, If not found, then serve $file_to_use
  # request will be passed to the `location ~ \.html` after this location
	location / {
		try_files $uri $uri/ $file_to_use;
	}

	location ~ \.html { # we define this location to handle request from above location and also prevent user from accessing directly to our HTML file
		add_header Set-Cookie auth_token=$my_auth_token; # send cookie back to user (to mark them as authenticated user or not)
    add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0, pre-check=0, post-check=0'; # this is IMPORTANT, tell browser: DON'T CACHE HTML file, because if that you will be reload over and over (I take this idea from Twitter)
		try_files /$file_to_use /$file_to_use; # serve directly file (no try to server $uri)
	}
}